import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Box,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Grid,
  Card,
  CardContent,
  IconButton,
  Divider,
  useTheme,
  useMediaQuery,
  CircularProgress,
  Alert,
  Avatar
} from '@mui/material';
import {
  Close as CloseIcon,
  Download as DownloadIcon,
  Print as PrintIcon,
  Assessment as AssessmentIcon,
  Person as PersonIcon,
  Business as BusinessIcon,
  Assignment as TaskIcon,
  ConfirmationNumber as TicketIcon
} from '@mui/icons-material';

const ReportViewDialog = ({ open, onClose, reportData, reportType, loading, selectedReport }) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [isGenerating, setIsGenerating] = useState(false);

  const getReportIcon = (type) => {
    switch (type) {
      case 'ticket':
        return <TicketIcon color="error" />;
      case 'task':
        return <TaskIcon color="primary" />;
      case 'user':
        return <PersonIcon color="secondary" />;
      case 'department':
        return <BusinessIcon color="info" />;
      default:
        return <AssessmentIcon />;
    }
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'completed':
      case 'resolved':
        return 'success';
      case 'pending':
        return 'warning';
      case 'in_progress':
      case 'in progress':
        return 'info';
      case 'declined':
      case 'overdue':
        return 'error';
      default:
        return 'default';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority?.toLowerCase()) {
      case 'critical':
        return 'error';
      case 'high':
        return 'warning';
      case 'medium':
        return 'info';
      case 'low':
        return 'success';
      default:
        return 'default';
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString();
  };

  const formatDuration = (days) => {
    if (!days || days === 0) return 'N/A';
    return `${days} days`;
  };

  const handleDownload = async () => {
    setIsGenerating(true);
    try {
      console.log('Downloading report as PDF...');
      
      if (!selectedReport || !selectedReport.id) {
        throw new Error('No report selected for download');
      }
      
      // Import reportService dynamically to avoid circular dependencies
      const reportService = (await import('../../services/reportService')).default;
      
      // Generate filename based on report data
      const reportName = selectedReport.title || selectedReport.name || 'report';
      const safeName = reportName.replace(/[^a-zA-Z0-9]/g, '_');
      const filename = `${safeName}_${new Date().toISOString().split('T')[0]}.pdf`;
      
      await reportService.downloadReport(selectedReport.id, 'pdf', filename);
      console.log('Report downloaded successfully');
      
      // You could add a success toast notification here
      // showSnackbar('Report downloaded successfully!', 'success');
    } catch (error) {
      console.error('Error downloading report:', error);
      
      // You could add an error toast notification here
      // showSnackbar(`Failed to download report: ${error.message}`, 'error');
      
      // For now, we'll just log the error
      alert(`Failed to download report: ${error.message}`);
    } finally {
      setIsGenerating(false);
    }
  };

  const handlePrint = () => {
    window.print();
  };

  if (loading) {
      return (
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogContent sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: 200 }}>
          <CircularProgress />
        </DialogContent>
      </Dialog>
    );
  }

  if (!reportData) {
    return (
      <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
        <DialogContent>
          <Alert severity="error">No report data available</Alert>
        </DialogContent>
      </Dialog>
    );
  }

  const { report, data } = reportData;

    return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="lg" 
      fullWidth
      PaperProps={{
        sx: { minHeight: '80vh' }
      }}
    >
      <DialogTitle sx={{ 
        borderBottom: `1px solid ${theme.palette.divider}`,
        pb: 2,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          {getReportIcon(reportType)}
          <Box>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              {report?.title || 'Report'}
                        </Typography>
            <Typography variant="body2" color="text.secondary">
              Generated by {report?.generatedBy} on {formatDate(report?.generatedOn)}
            </Typography>
          </Box>
        </Box>
        <IconButton onClick={onClose} size="small">
          <CloseIcon />
        </IconButton>
      </DialogTitle>

      <DialogContent sx={{ p: 3 }}>
        {/* Filters Applied */}
        {report?.filtersApplied && (
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Filters Applied
              </Typography>
              <Grid container spacing={2}>
                {Object.entries(report.filtersApplied).map(([key, value]) => {
                  // Safely convert value to string
                  let displayValue = '';
                  if (typeof value === 'string') {
                    displayValue = value;
                  } else if (typeof value === 'number') {
                    displayValue = value.toString();
                  } else if (typeof value === 'object' && value !== null) {
                    if (Array.isArray(value)) {
                      displayValue = value.join(', ');
                    } else {
                      displayValue = JSON.stringify(value);
                    }
                  } else {
                    displayValue = String(value || 'N/A');
                  }

    return (
                    <Grid item xs={12} sm={6} md={4} key={key}>
      <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
        </Typography>
                        <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {displayValue}
              </Typography>
            </Box>
                    </Grid>
                  );
                })}
              </Grid>
            </CardContent>
          </Card>
        )}

        {/* Summary Section */}
        {data?.summary && (
              <Card sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Summary
                  </Typography>
              <Grid container spacing={2}>
                {Object.entries(data.summary).map(([key, value]) => {
                  // Handle different value types safely
                  let displayValue = '';
                  if (typeof value === 'number') {
                    displayValue = value.toLocaleString();
                  } else if (typeof value === 'object' && value !== null) {
                    if (Array.isArray(value)) {
                      displayValue = value.length.toString();
                    } else {
                      displayValue = Object.keys(value).length.toString();
                    }
                  } else if (typeof value === 'string') {
                    displayValue = value;
                  } else {
                    displayValue = String(value || 'N/A');
    }

    return (
                    <Grid item xs={6} sm={4} md={3} key={key}>
                      <Box sx={{ textAlign: 'center' }}>
                        <Typography variant="h4" sx={{ fontWeight: 700, color: theme.palette.primary.main }}>
                          {displayValue}
                      </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                      </Typography>
          </Box>
                    </Grid>
                  );
                })}
                  </Grid>
                </CardContent>
              </Card>
            )}

        {/* Status/Priority Breakdown */}
        {(data?.statusBreakdown || data?.priorityBreakdown) && (
          <Grid container spacing={3} sx={{ mb: 3 }}>
            {data.statusBreakdown && (
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      Status Breakdown
                            </Typography>
                    {data.statusBreakdown.map((item, index) => (
                      <Box key={index} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                        <Chip 
                          label={item.status} 
                          color={getStatusColor(item.status)} 
                          size="small" 
                          variant="outlined"
                        />
                        <Typography variant="body2">
                          {item.count} ({item.percentage}%)
                            </Typography>
                      </Box>
                    ))}
                          </CardContent>
                        </Card>
                      </Grid>
            )}

            {data.priorityBreakdown && (
              <Grid item xs={12} md={6}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                      Priority Breakdown
                            </Typography>
                    {data.priorityBreakdown.map((item, index) => (
                      <Box key={index} sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
                        <Chip 
                          label={item.priority} 
                          color={getPriorityColor(item.priority)} 
                          size="small" 
                          variant="outlined"
                        />
                        <Typography variant="body2">
                          {item.count}
                            </Typography>
                      </Box>
                    ))}
                          </CardContent>
                        </Card>
                      </Grid>
            )}
                </Grid>
            )}

        {/* User/Department Profile */}
        {(data?.userProfile || data?.departmentProfile) && (
              <Card sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                {data.userProfile ? 'User Profile' : 'Department Profile'}
                  </Typography>
              <Grid container spacing={2}>
                {Object.entries(data.userProfile || data.departmentProfile).map(([key, value]) => {
                  // Safely convert value to string
                  let displayValue = '';
                  if (typeof value === 'string') {
                    displayValue = value;
                  } else if (typeof value === 'number') {
                    displayValue = value.toString();
                  } else if (typeof value === 'object' && value !== null) {
                    if (Array.isArray(value)) {
                      displayValue = value.join(', ');
                    } else {
                      displayValue = JSON.stringify(value);
                    }
                  } else {
                    displayValue = String(value || 'N/A');
                  }

      return (
                    <Grid item xs={12} sm={6} md={4} key={key}>
        <Box>
                        <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                      </Typography>
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                          {displayValue}
                      </Typography>
                      </Box>
                    </Grid>
                  );
                })}
              </Grid>
            </CardContent>
          </Card>
        )}

        {/* Custom Report Metrics */}
        {reportType === 'custom' && data?.customMetrics && (
          <Card sx={{ mb: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Custom Metrics
                      </Typography>
              <Grid container spacing={2}>
                {Object.entries(data.customMetrics).map(([key, value]) => {
                  // Handle different value types safely
                  let displayValue = '';
                  if (typeof value === 'number') {
                    displayValue = value.toLocaleString();
                  } else if (typeof value === 'object' && value !== null) {
                    if (Array.isArray(value)) {
                      displayValue = value.length.toString();
                    } else {
                      displayValue = Object.keys(value).length.toString();
                    }
                  } else if (typeof value === 'string') {
                    displayValue = value;
                  } else {
                    displayValue = String(value || 'N/A');
                  }

                  return (
                    <Grid item xs={6} sm={4} md={3} key={key}>
                      <Box sx={{ textAlign: 'center' }}>
                        <Typography variant="h5" sx={{ fontWeight: 700, color: theme.palette.primary.main }}>
                          {displayValue}
                      </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                        </Typography>
                      </Box>
                    </Grid>
                  );
                })}
                  </Grid>
                </CardContent>
              </Card>
            )}

        {/* Details Table */}
        {data?.details && data.details.length > 0 && (
          <Card>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Details
                  </Typography>
              <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader>
                      <TableHead>
                        <TableRow>
                      {Object.keys(data.details[0]).map((key) => (
                        <TableCell key={key} sx={{ fontWeight: 600, textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                          </TableCell>
                        ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                    {data.details.map((row, index) => (
                      <TableRow key={index}>
                        {Object.entries(row).map(([key, value]) => (
                          <TableCell key={key}>
                            {key.toLowerCase().includes('status') ? (
                              <Chip
                                    label={value}
                                color={getStatusColor(value)} 
                                size="small"
                                variant="outlined"
                              />
                            ) : key.toLowerCase().includes('priority') ? (
                              <Chip
                                label={value} 
                                color={getPriorityColor(value)} 
                                size="small"
                                variant="outlined"
                              />
                            ) : key.toLowerCase().includes('date') ? (
                              formatDate(value)
                            ) : (
                              value || 'N/A'
                                )}
                            </TableCell>
                        ))}
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </TableContainer>
                </CardContent>
              </Card>
            )}

        {/* Activity Table */}
        {data?.activity && data.activity.length > 0 && (
          <Card sx={{ mt: 3 }}>
                <CardContent>
                  <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Activity
                  </Typography>
              <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
                      {Object.keys(data.activity[0]).map((key) => (
                        <TableCell key={key} sx={{ fontWeight: 600, textTransform: 'capitalize' }}>
                          {key.replace(/([A-Z])/g, ' $1').trim()}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
                    {data.activity.map((row, index) => (
                      <TableRow key={index}>
                        {Object.entries(row).map(([key, value]) => (
                          <TableCell key={key}>
                            {key.toLowerCase().includes('status') ? (
                        <Chip
                          label={value}
                                color={getStatusColor(value)} 
                          size="small"
                                variant="outlined"
                        />
                            ) : key.toLowerCase().includes('priority') ? (
                  <Chip
                          label={value}
                                color={getPriorityColor(value)} 
                    size="small"
                          variant="outlined"
                  />
                            ) : key.toLowerCase().includes('date') ? (
                              formatDate(value)
                      ) : (
                              value || 'N/A'
                      )}
                </TableCell>
                        ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
                </CardContent>
              </Card>
            )}

        {/* Data Tables for Custom Reports */}
        {reportType === 'custom' && (
          <>
            {/* Tasks Table */}
            {data?.tasks && data.tasks.length > 0 && (
              <Card sx={{ mt: 3 }}>
                <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Tasks ({data.tasks.length})
                </Typography>
                  <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                          <TableCell sx={{ fontWeight: 600 }}>Title</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Priority</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Assigned To</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Created</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                        {data.tasks.slice(0, 10).map((task, index) => (
                          <TableRow key={index}>
                            <TableCell>{task.title}</TableCell>
                          <TableCell>
                            <Chip
                              label={task.status}
                              color={getStatusColor(task.status)}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                                    <Chip
                                label={task.priority || 'Medium'} 
                                color={getPriorityColor(task.priority)} 
                                      size="small"
                              />
                          </TableCell>
                          <TableCell>
                              {task.taskAssignee ? 
                                `${task.taskAssignee.firstname} ${task.taskAssignee.lastname}` : 
                                'Unassigned'
                              }
                          </TableCell>
                            <TableCell>{formatDate(task.createdAt)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                  {data.tasks.length > 10 && (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
                      Showing first 10 of {data.tasks.length} tasks
                    </Typography>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Tickets Table */}
            {data?.tickets && data.tickets.length > 0 && (
              <Card sx={{ mt: 3 }}>
                <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Tickets ({data.tickets.length})
                </Typography>
                  <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell sx={{ fontWeight: 600 }}>Title</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Priority</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Assigned To</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Created</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                        {data.tickets.slice(0, 10).map((ticket, index) => (
                          <TableRow key={index}>
                            <TableCell>{ticket.title}</TableCell>
                          <TableCell>
                            <Chip
                              label={ticket.status}
                              color={getStatusColor(ticket.status)}
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                            <Chip
                                label={ticket.priority || 'Medium'} 
                                color={getPriorityColor(ticket.priority)} 
                              size="small"
                            />
                          </TableCell>
                          <TableCell>
                              {ticket.ticketAssignee ? 
                                `${ticket.ticketAssignee.firstname} ${ticket.ticketAssignee.lastname}` : 
                                'Unassigned'
                              }
                          </TableCell>
                            <TableCell>{formatDate(ticket.createdAt)}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                  {data.tickets.length > 10 && (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
                      Showing first 10 of {data.tickets.length} tickets
                            </Typography>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Users Table */}
            {data?.users && data.users.length > 0 && (
              <Card sx={{ mt: 3 }}>
                <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Users ({data.users.length})
                </Typography>
                  <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                          <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>
                          <TableCell sx={{ fontWeight: 600 }}>Email</TableCell>
                          <TableCell sx={{ fontWeight: 600 }}>Role</TableCell>
                          <TableCell sx={{ fontWeight: 600 }}>Department</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                        {data.users.slice(0, 10).map((user, index) => (
                          <TableRow key={index}>
                          <TableCell>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                <Avatar sx={{ width: 24, height: 24, fontSize: '0.75rem' }}>
                                  {user.firstname?.[0]}{user.lastname?.[0]}
                                </Avatar>
                                {user.firstname} {user.lastname}
                              </Box>
                          </TableCell>
                            <TableCell>{user.email}</TableCell>
                          <TableCell>
                            <Chip
                                label={user.role} 
                                color={user.role === 'admin' ? 'error' : user.role === 'department_head' ? 'warning' : 'default'} 
                              size="small"
                            />
                          </TableCell>
                            <TableCell>{user.department?.name || 'N/A'}</TableCell>
                          <TableCell>
                            <Chip
                                label={user.isActive ? 'Active' : 'Inactive'} 
                                color={user.isActive ? 'success' : 'default'} 
                              size="small"
                            />
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                  {data.users.length > 10 && (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
                      Showing first 10 of {data.users.length} users
                    </Typography>
                  )}
                </CardContent>
              </Card>
            )}

            {/* Departments Table */}
            {data?.departments && data.departments.length > 0 && (
              <Card sx={{ mt: 3 }}>
                <CardContent>
                <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                    Departments ({data.departments.length})
                </Typography>
                  <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                          <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>
                          <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>
                          <TableCell sx={{ fontWeight: 600 }}>Employees</TableCell>
                        <TableCell sx={{ fontWeight: 600 }}>Status</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                        {data.departments.slice(0, 10).map((dept, index) => (
                          <TableRow key={index}>
                            <TableCell>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                <BusinessIcon color="info" />
                                {dept.name}
                              </Box>
                            </TableCell>
                            <TableCell>{dept.description || 'N/A'}</TableCell>
                            <TableCell>{dept.users?.length || 0}</TableCell>
                            <TableCell>
                              <Chip 
                                label={dept.isActive ? 'Active' : 'Inactive'} 
                                color={dept.isActive ? 'success' : 'default'} 
                                size="small" 
                              />
                            </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </TableContainer>
                  {data.departments.length > 10 && (
                    <Typography variant="body2" color="text.secondary" sx={{ mt: 1, textAlign: 'center' }}>
                      Showing first 10 of {data.departments.length} departments
                    </Typography>
                  )}
                  </CardContent>
                </Card>
                )}
              </>
            )}

        {/* Insights */}
        {data?.insights && Object.keys(data.insights).length > 0 && (
          <Card sx={{ mt: 3 }}>
            <CardContent>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                Insights
              </Typography>
              <Grid container spacing={3}>
                {Object.entries(data.insights).map(([key, value]) => {
                  // Format the key to be more readable
                  const formattedKey = key.replace(/([A-Z])/g, ' $1').trim()
                    .replace(/^./, str => str.toUpperCase());
                  
                  // Format the value based on the key type and content
                  let displayValue = '';
                  let isPercentage = false;
                  let isTime = false;
                  
                  if (key.toLowerCase().includes('rate') || key.toLowerCase().includes('percentage') || key.toLowerCase().includes('compliance')) {
                    isPercentage = true;
                  }
                  
                  if (key.toLowerCase().includes('time') || key.toLowerCase().includes('duration')) {
                    isTime = true;
                  }
                  
                  if (Array.isArray(value)) {
                    if (value.length === 0) {
                      displayValue = 'No data';
                    } else if (value.every(item => typeof item === 'object')) {
                      // Handle array of objects (like workload distribution)
                      displayValue = value.map(item => {
                        if (typeof item === 'object' && item !== null) {
                          const entries = Object.entries(item);
                          if (entries.length === 2) {
                            const [name, data] = entries;
                            if (typeof data === 'object' && data !== null) {
                              const dataEntries = Object.entries(data);
                              if (dataEntries.length > 0) {
                                return `${name}: ${dataEntries.map(([k, v]) => `${k}: ${v}`).join(', ')}`;
                              }
                            }
                            return `${name}: ${data}`;
                          }
                          return JSON.stringify(item);
                        }
                        return String(item);
                      }).join('; ');
                    } else {
                      displayValue = value.join(', ');
                    }
                  } else if (typeof value === 'object' && value !== null) {
                    // Handle objects (like workload distribution, priority distribution)
                    const entries = Object.entries(value);
                    if (entries.length === 0) {
                      displayValue = 'No data';
                    } else if (entries.length <= 3) {
                      // For small objects, show as key-value pairs
                      displayValue = entries.map(([k, v]) => {
                        if (typeof v === 'object' && v !== null) {
                          const subEntries = Object.entries(v);
                          if (subEntries.length > 0) {
                            return `${k}: ${subEntries.map(([sk, sv]) => `${sk}: ${sv}`).join(', ')}`;
                          }
                        }
                        return `${k}: ${v}`;
                      }).join('; ');
                    } else {
                      // For large objects, show count
                      displayValue = `${entries.length} items`;
                    }
                  } else if (typeof value === 'number') {
                    if (isPercentage) {
                      displayValue = `${value.toFixed(1)}%`;
                    } else if (isTime) {
                      if (value < 1) {
                        displayValue = `${(value * 24).toFixed(1)} hours`;
                      } else {
                        displayValue = `${value.toFixed(1)} days`;
                      }
                    } else {
                      displayValue = value.toLocaleString();
                    }
                  } else if (typeof value === 'string') {
                    displayValue = value;
                  } else if (value === null || value === undefined) {
                    displayValue = 'N/A';
                  } else {
                    displayValue = String(value);
                  }

                  return (
                    <Grid item xs={12} sm={6} md={4} key={key}>
            <Box sx={{ 
                        p: 2, 
                        border: `1px solid ${theme.palette.divider}`, 
                        borderRadius: 2,
                        backgroundColor: theme.palette.background.paper,
                        height: '100%'
                      }}>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1, fontWeight: 500 }}>
                          {formattedKey}
              </Typography>
                        <Typography 
                          variant="body1" 
                sx={{ 
                    fontWeight: 600, 
                            color: theme.palette.primary.main,
                            wordBreak: 'break-word',
                            lineHeight: 1.4
                          }}
                        >
                          {displayValue}
          </Typography>
                      </Box>
                    </Grid>
                  );
                })}
              </Grid>
            </CardContent>
          </Card>
        )}
      </DialogContent>

      <DialogActions sx={{ p: 3, borderTop: `1px solid ${theme.palette.divider}` }}>
        <Button 
          onClick={onClose}
          variant="outlined"
          sx={{ borderRadius: 2, px: 3 }}
        >
          Close
        </Button>
        <Button 
          onClick={handlePrint}
          variant="outlined"
          startIcon={<PrintIcon />}
          sx={{ borderRadius: 2, px: 3 }}
        >
          Print
        </Button>
        <Button 
          onClick={handleDownload}
          variant="contained"
          startIcon={isGenerating ? <CircularProgress size={20} /> : <DownloadIcon />}
          sx={{ borderRadius: 2, px: 3 }}
          disabled={isGenerating}
        >
          {isGenerating ? 'Generating...' : 'Download PDF'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default ReportViewDialog; 